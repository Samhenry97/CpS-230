JWasm v2.11, Oct 20 2013
p8.asm
                                ;       Program: Interrupt Service Routine
                                ;   Description: Uses int 8 to print the characters '0' thru '9' in the top
                                ; 					left of the screen. Also, the user can type characters,
                                ;					and they will still appear on the screen
                                ;        Author: Sam Henry
                                ;          Date: 11/18/15
                                ; Help Received: None

                                .model tiny     ; Tiny model: one code/data segment (CS==DS)
                                .386            ; Support for 32-bit registers/instructions
                                .stack 100h     ; Required to avoid warnings (and actually useful, too)

                                .code

00000000  0000                  int8_off word ?		; For the interrupt 8 offset
00000002  0000                  int8_seg word ?		; For the interrupt 8 segment
00000004  30                    char byte '0'		; The current character in the upper left corner of the screen

                                ;************************************************************************
                                ; Function: Program Entry Point
                                ; Receives: Nothing
                                ; Returns: Nothing
                                ; Requires: Nothing
                                ; Clobbers: Any/All
00000005                        main proc
00000005  8CC8                  		mov	ax, cs			; Set DS == CS (one segment model)
00000007  8ED8                  		mov	ds, ax
                                		
00000009  E83C00                		call install_ISR	; Install the interrupt service routine for int 8
                                		
0000000C  B80300                		mov ax, 0003h		; Change to text graphics mode
0000000F  CD10                  		int 10h
00000011  BB00B8                		mov bx, 0b800h		; Move the frame buffer in to ES
00000014  8EC3                  		mov es, bx
                                		
00000016                        	readchar:
00000016  B410                  		mov ah, 10h			; Read a character
00000018  CD16                  		int 16h
0000001A  3C1B                  		cmp al, 1bh			; Terminate if the character is ESC
0000001C  7450                  		jz uninstall_ISR
0000001E  B40E                  		mov ah, 0eh			; Print the character to the screen
00000020  CD10                  		int 10h
00000022  EBF2                  		jmp readchar		; Loop
00000024                        main endp

                                ;************************************************************************
                                ; Function: This procedure is called when the timer BIOS interrupt is hit.
                                ; 			It will print the characters from '0' to '9' in the top left
                                ;			corner of the screen.
                                ; Receives: Nothing
                                ;  Returns: Nothing
                                ; Requires: In order to be called, the procedure must be installed as an
                                ;			interrupt service routine at vector 8
                                ; Clobbers: Nothing
00000024                        timerHit proc
00000024  60                    		pusha				; Save registers during interrupt call
00000025  8B160400              		mov dx, word ptr [char]		; Print the current character in the top left
00000029  2689160000            		mov es:[0h], dx
                                		
0000002E  FE060400              		inc [char]
00000032  803E04003A            		cmp [char], ':'		; ':' is the character after '9' in the ASCII table
00000037  7505                  		jnz continue
00000039  C606040030            		mov [char], '0'
                                		
0000003E                        	continue:
0000003E  61                    		popa
0000003F  FF360200              		push word ptr [int8_seg]		; Return to the chained int 8
00000043  FF360000              		push word ptr [int8_off]
00000047  CB                    		retf
00000048                        timerHit endp

                                ;************************************************************************
                                ; Function: Actually installs the interrupt service routine, and sets it
                                ;			to interrupt vector 8. The procedure 'timerHit' is the new
                                ;			interrupt service routine.
                                ; Receives: Nothing
                                ;  Returns: Nothing
                                ; Requires: Nothing
                                ; Clobbers: Nothing
00000048                        install_ISR proc
00000048  FA                    		cli								; Clear interrupts
                                		
00000049  BB0000                		mov bx, 0
0000004C  8EC3                  		mov es, bx						; es == 0
0000004E  268B1E2000            		mov bx, es:[20h]				; Save the segment and offset of int 8
00000053  891E0000              		mov [int8_off], bx
00000057  268B1E2200            		mov bx, es:[22h]
0000005C  891E0200              		mov [int8_seg], bx
00000060  26C70620002400        		mov es:[20h], offset timerHit	; Install interrupt handler
00000067  268C0E2200            		mov es:[22h], cs
                                		
0000006C  FB                    		sti
0000006D                        		ret
0000006E                        install_ISR endp

                                ;************************************************************************
                                ; Function: Uninstalls the interrupt service routine and sets the old 
                                ;			routine back to where is was in es. Also changes the video
                                ;			mode back to regular and then exits the program.
                                ; Receives: Nothing
                                ;  Returns: Nothing
                                ; Requires: A interrupt offset and segment in the variables 'int8_off' and
                                ;			'int8_seg'. The interrupt vector should be int 8
                                ; Clobbers: Nothing
0000006E                        uninstall_ISR proc
0000006E  FA                    		cli								; Clear interrupts
                                		
0000006F  BB0000                		mov bx, 0						; es == 0
00000072  8EC3                  		mov es, bx
00000074  8B1E0000              		mov bx, [int8_off]				; Restore the vector table
00000078  26891E2000            		mov es:[20h], bx
0000007D  8B1E0200              		mov bx, [int8_seg]
00000081  26891E2200            		mov es:[22h], bx
                                		
00000086  FB                    		sti
                                		
00000087  B80100                		mov ax, 0001h					; Change back to regular video mode
0000008A  CD10                  		int 10h
                                		
0000008C  B44C                  		mov	ah, 4Ch						; Exit the program
0000008E  CD21                  		int	21h
00000090                        uninstall_ISR endp

                                end main


Macros:

                N a m e                 Type

@CatStr  . . . . . . . . . . . .        Func
@Environ . . . . . . . . . . . .        Func
@InStr . . . . . . . . . . . . .        Func
@SizeStr . . . . . . . . . . . .        Func
@SubStr  . . . . . . . . . . . .        Func


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

$$SYMBOLS  . . . . . . . . . . .        32 Bit   0000012C Byte    Private 'DEBSYM'
$$TYPES  . . . . . . . . . . . .        32 Bit   0000004C Byte    Private 'DEBTYP'
DGROUP . . . . . . . . . . . . .        GROUP
_TEXT  . . . . . . . . . . . . .        16 Bit   0090     Word    Public  'CODE'
_DATA  . . . . . . . . . . . . .        16 Bit   0000     Word    Public  'DATA'
STACK  . . . . . . . . . . . . .        16 Bit   0100     Para    Stack   'STACK'


Procedures, parameters and locals:

                N a m e                 Type     Value    Segment  Length

install_ISR  . . . . . . . . . .        P Near   0048     _TEXT    0026 Private  
main . . . . . . . . . . . . . .        P Near   0005     _TEXT    001F Private  
timerHit . . . . . . . . . . . .        P Near   0024     _TEXT    0024 Private  
uninstall_ISR  . . . . . . . . .        P Near   006E     _TEXT    0022 Private  


Symbols:

                N a m e                 Type       Value     Attr

@CodeSize  . . . . . . . . . . .        Number             0h 
@DataSize  . . . . . . . . . . .        Number             0h 
@Interface . . . . . . . . . . .        Number             0h 
@Model . . . . . . . . . . . . .        Number             1h 
@code  . . . . . . . . . . . . .        Text   _TEXT
@data  . . . . . . . . . . . . .        Text   DGROUP
@stack . . . . . . . . . . . . .        Text   DGROUP
char . . . . . . . . . . . . . .        Byte               4h _TEXT 
continue . . . . . . . . . . . .        L Near            3Eh _TEXT 
int8_off . . . . . . . . . . . .        Word               0h _TEXT 
int8_seg . . . . . . . . . . . .        Word               2h _TEXT 
readchar . . . . . . . . . . . .        L Near            16h _TEXT 

p8.asm: 124 lines, 2 passes, 16 ms, 0 warnings, 0 errors
